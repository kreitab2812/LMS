package com.lms.quanlythuvien.controllers.user;

import com.lms.quanlythuvien.models.system.Notification;
import com.lms.quanlythuvien.models.user.User;
import com.lms.quanlythuvien.services.system.NotificationService;
import com.lms.quanlythuvien.utils.session.SessionManager;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
// B·ªè import ImageView v√† Image n·∫øu kh√¥ng d√πng n·ªØa
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;

// import java.io.InputStream; // Kh√¥ng c·∫ßn n·ªØa n·∫øu kh√¥ng load ·∫£nh
import java.net.URL;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.ResourceBundle;

public class NotificationsController implements Initializable {

    @FXML private Button refreshNotificationsButton;
    @FXML private Button markAllAsReadButton;
    @FXML private Button deleteReadNotificationsButton;
    @FXML private ListView<Notification> notificationsListView;

    private NotificationService notificationService;
    private User currentUser;
    private ObservableList<Notification> observableNotificationList;

    // Kh√¥ng c·∫ßn c√°c bi·∫øn Image cho icon n·ªØa
    // private Image infoIcon, successIcon, warningIcon, errorIcon, loanIcon;

    public NotificationsController() {
        notificationService = NotificationService.getInstance();
        currentUser = SessionManager.getInstance().getCurrentUser();
        observableNotificationList = FXCollections.observableArrayList();
        // Kh√¥ng c·∫ßn g·ªçi loadIcons() n·ªØa
    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        notificationsListView.setItems(observableNotificationList);
        setupNotificationCellFactory();

        if (currentUser != null) {
            loadNotifications();
        } else {
            notificationsListView.setPlaceholder(new Label("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng b√°o."));
            if (markAllAsReadButton != null) markAllAsReadButton.setDisable(true);
            if (refreshNotificationsButton != null) refreshNotificationsButton.setDisable(true);
            if (deleteReadNotificationsButton != null) deleteReadNotificationsButton.setDisable(true);
        }
    }

    // B·ªè ph∆∞∆°ng th·ª©c loadIcons() v√† loadImage()

    private void loadNotifications() {
        if (currentUser == null) return;
        List<Notification> userNotifications = notificationService.getNotificationsForUser(currentUser.getUserId(), false);
        observableNotificationList.setAll(userNotifications);
        notificationsListView.refresh();
        updateUnreadCountInSidebar();
    }

    private void setupNotificationCellFactory() {
        notificationsListView.setCellFactory(listView -> new ListCell<Notification>() {
            private final HBox hbox = new HBox(10); // Spacing gi·ªØa c√°c th√†nh ph·∫ßn
            private final Label emojiIconLabel = new Label(); // D√πng Label cho Emoji
            private final VBox textContainer = new VBox(3);
            private final Label messageLabel = new Label();
            private final Label timestampLabel = new Label();

            // Kh·ªëi kh·ªüi t·∫°o instance
            {
                emojiIconLabel.setMinWidth(24); // ƒê·∫£m b·∫£o c√≥ kh√¥ng gian cho emoji
                emojiIconLabel.setAlignment(Pos.CENTER);
                emojiIconLabel.setStyle("-fx-font-size: 1.5em;"); // K√≠ch th∆∞·ªõc Emoji

                messageLabel.setWrapText(true);
                timestampLabel.getStyleClass().add("notification-timestamp");

                VBox.setVgrow(messageLabel, Priority.ALWAYS);
                HBox.setHgrow(textContainer, Priority.ALWAYS);
                textContainer.getChildren().addAll(messageLabel, timestampLabel);
                // Th√™m emojiLabel v√†o HBox
                hbox.getChildren().addAll(emojiIconLabel, textContainer);
                hbox.setAlignment(Pos.CENTER_LEFT);
                hbox.setPadding(new Insets(8, 10, 8, 10));

                this.setOnMouseClicked(event -> {
                    Notification item = getItem();
                    if (item != null && !item.isRead()) {
                        if (notificationService.markAsRead(item.getId())) {
                            item.setRead(true);
                            updateItemStyle(item);
                            updateUnreadCountInSidebar();
                        }
                    }
                    if (item != null && item.getActionLink() != null && !item.getActionLink().isEmpty()){
                        System.out.println("Notification action link clicked: " + item.getActionLink());
                        // TODO: X·ª≠ l√Ω actionLink (v√≠ d·ª•: ƒëi·ªÅu h∆∞·ªõng)
                        // V√≠ d·ª•: if ("view_loan_details".equals(item.getActionLink())) {
                        //     MainApp.loadScene("user/LoanDetailsView.fxml", item.getRelatedItemId());
                        // }
                    }
                });
            }

            private void updateItemStyle(Notification item) {
                if (item != null && !item.isRead()) {
                    messageLabel.setStyle("-fx-font-weight: bold;");
                    // C√≥ th·ªÉ th√™m styleClass cho to√†n b·ªô HBox n·∫øu ch∆∞a ƒë·ªçc
                    // hbox.getStyleClass().add("unread-notification-cell");
                    // hbox.getStyleClass().remove("read-notification-cell");
                } else {
                    messageLabel.setStyle("-fx-font-weight: normal;");
                    // hbox.getStyleClass().remove("unread-notification-cell");
                    // hbox.getStyleClass().add("read-notification-cell");
                }
            }

            @Override
            protected void updateItem(Notification item, boolean empty) {
                super.updateItem(item, empty);
                if (empty || item == null) {
                    setText(null);
                    setGraphic(null);
                } else {
                    messageLabel.setText(item.getMessage());
                    timestampLabel.setText(item.getFormattedCreatedAt());

                    String emoji = "‚ÑπÔ∏è"; // Default INFO emoji
                    switch (item.getType()) {
                        case INFO:           emoji = "‚ÑπÔ∏è"; break;
                        case SUCCESS:        emoji = "‚úÖ"; break;
                        case WARNING:        emoji = "‚ö†Ô∏è"; break;
                        case ERROR:          emoji = "‚ùå"; break;
                        case LOAN_APPROVED:  emoji = "üëç"; break; // Ho·∫∑c üéâ
                        case LOAN_REJECTED:  emoji = "üëé"; break;
                        case LOAN_DUE_SOON:  emoji = "‚è∞"; break;
                        case LOAN_OVERDUE:   emoji = "‚ùó"; break;
                        // case NEW_BOOK_MATCHING_PREFERENCE: emoji = "üìñ"; break; // N·∫øu c√≥ type n√†y
                        default: emoji = "‚ÑπÔ∏è";
                    }
                    emojiIconLabel.setText(emoji);

                    updateItemStyle(item);
                    setGraphic(hbox);
                }
            }
        });
    }

    @FXML
    void handleRefreshNotifications(ActionEvent event) {
        if (currentUser != null) {
            loadNotifications();
            showAlert(Alert.AlertType.INFORMATION, "L√†m m·ªõi", "ƒê√£ c·∫≠p nh·∫≠t danh s√°ch th√¥ng b√°o.");
        } else {
            showAlert(Alert.AlertType.WARNING, "L·ªói", "Kh√¥ng th·ªÉ l√†m m·ªõi, vui l√≤ng ƒëƒÉng nh·∫≠p.");
        }
    }

    @FXML
    void handleMarkAllAsRead(ActionEvent event) {
        if (currentUser != null) {
            boolean anyUpdated = notificationService.markAllAsRead(currentUser.getUserId());
            loadNotifications(); // Lu√¥n t·∫£i l·∫°i ƒë·ªÉ refresh UI
            if (anyUpdated) {
                showAlert(Alert.AlertType.INFORMATION, "Ho√†n t·∫•t", "T·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ƒë√£ ƒë·ªçc.");
            } else {
                showAlert(Alert.AlertType.INFORMATION, "Th√¥ng b√°o", "Kh√¥ng c√≥ th√¥ng b√°o m·ªõi n√†o ƒë·ªÉ ƒë√°nh d·∫•u ho·∫∑c ƒë√£ ƒë·ªçc t·∫•t c·∫£.");
            }
        } else {
            showAlert(Alert.AlertType.WARNING, "L·ªói", "Kh√¥ng th·ªÉ th·ª±c hi·ªán, vui l√≤ng ƒëƒÉng nh·∫≠p.");
        }
    }

    @FXML
    void handleDeleteReadNotificationsAction(ActionEvent event) {
        if (currentUser != null) {
            boolean anyDeleted = notificationService.deleteReadNotifications(currentUser.getUserId());
            if (anyDeleted) {
                loadNotifications(); // T·∫£i l·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t UI
                showAlert(Alert.AlertType.INFORMATION, "Ho√†n t·∫•t", "ƒê√£ x√≥a c√°c th√¥ng b√°o ƒë√£ ƒë·ªçc.");
            } else {
                showAlert(Alert.AlertType.INFORMATION, "Th√¥ng b√°o", "Kh√¥ng c√≥ th√¥ng b√°o ƒë√£ ƒë·ªçc n√†o ƒë·ªÉ x√≥a ho·∫∑c c√≥ l·ªói x·∫£y ra.");
            }
        } else {
            showAlert(Alert.AlertType.WARNING, "L·ªói", "Kh√¥ng th·ªÉ th·ª±c hi·ªán, vui l√≤ng ƒëƒÉng nh·∫≠p.");
        }
    }

    private void updateUnreadCountInSidebar() {
        if (currentUser != null) {
            int unreadCount = notificationService.getUnreadNotificationCount(currentUser.getUserId());
            System.out.println("DEBUG_NOTIF_CTRL: Unread notifications for user " + currentUser.getUserId() + ": " + unreadCount);
            // TODO: C·∫≠p nh·∫≠t m·ªôt Label ho·∫∑c Badge tr√™n n√∫t "Th√¥ng b√°o" ·ªü UserDashboardController
            // V√≠ d·ª•: ((UserDashboardController) MainApp.getControllerForCurrentScene()).updateNotificationBadge(unreadCount);
            // ƒêi·ªÅu n√†y ƒë√≤i h·ªèi c√°ch l·∫•y controller c·ªßa UserDashboard m·ªôt c√°ch an to√†n.
        }
    }

    private void showAlert(Alert.AlertType alertType, String title, String message) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        try {
            URL cssUrl = getClass().getResource("/com/lms/quanlythuvien/css/styles.css");
            if (cssUrl != null) {
                alert.getDialogPane().getStylesheets().add(cssUrl.toExternalForm());
            }
        } catch (Exception e) {
            System.err.println("Failed to load CSS for alert: " + e.getMessage());
        }
        alert.showAndWait();
    }
}