package com.lms.quanlythuvien.controllers.user;

import com.lms.quanlythuvien.MainApp;
import com.lms.quanlythuvien.models.item.Book; // <<< TH√äM IMPORT
import com.lms.quanlythuvien.models.system.Notification;
import com.lms.quanlythuvien.models.user.User;
import com.lms.quanlythuvien.services.library.BookManagementService; // <<< TH√äM IMPORT
import com.lms.quanlythuvien.services.system.NotificationService;
import com.lms.quanlythuvien.utils.session.SessionManager;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.Region;
import javafx.scene.layout.VBox;

import java.net.URL;
import java.util.List;
import java.util.Optional; // <<< TH√äM IMPORT
import java.util.ResourceBundle;

public class NotificationsController implements Initializable {

    @FXML private Button refreshNotificationsButton;
    @FXML private Button markAllAsReadButton;
    @FXML private Button deleteReadNotificationsButton;
    @FXML private ListView<Notification> notificationsListView;

    private NotificationService notificationService;
    private User currentUser;
    private ObservableList<Notification> observableNotificationList;

    private UserDashboardController dashboardController;

    public void setDashboardController(UserDashboardController dashboardController) {
        this.dashboardController = dashboardController;
        // C·∫≠p nh·∫≠t badge ngay khi controller n√†y ƒë∆∞·ª£c dashboard chu·∫©n b·ªã
        updateUnreadCountInSidebar();
    }

    public NotificationsController() {
        notificationService = NotificationService.getInstance();
        currentUser = SessionManager.getInstance().getCurrentUser();
        observableNotificationList = FXCollections.observableArrayList();
    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        notificationsListView.setItems(observableNotificationList);
        setupNotificationCellFactory();

        if (currentUser != null) {
            loadNotifications();
        } else {
            notificationsListView.setPlaceholder(new Label("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng b√°o."));
            disableActionButtons(true);
        }
    }

    private void disableActionButtons(boolean disable) {
        if (markAllAsReadButton != null) markAllAsReadButton.setDisable(disable);
        if (refreshNotificationsButton != null) refreshNotificationsButton.setDisable(disable);
        if (deleteReadNotificationsButton != null) deleteReadNotificationsButton.setDisable(disable);
    }

    private void loadNotifications() {
        if (currentUser == null) {
            observableNotificationList.clear();
            notificationsListView.setPlaceholder(new Label("Vui l√≤ng ƒëƒÉng nh·∫≠p."));
            disableActionButtons(true);
            return;
        }
        disableActionButtons(false);
        List<Notification> userNotifications = notificationService.getNotificationsForUser(currentUser.getUserId(), false); // L·∫•y c·∫£ ƒë√£ ƒë·ªçc v√† ch∆∞a ƒë·ªçc
        observableNotificationList.setAll(userNotifications); // setAll s·∫Ω t·ª± ƒë·ªông refresh ListView

        if (userNotifications.isEmpty()) {
            notificationsListView.setPlaceholder(new Label("B·∫°n kh√¥ng c√≥ th√¥ng b√°o n√†o."));
        }
        updateUnreadCountInSidebar();
    }

    private void setupNotificationCellFactory() {
        notificationsListView.setCellFactory(listView -> new ListCell<Notification>() {
            private final HBox hbox = new HBox(10);
            private final Label emojiIconLabel = new Label();
            private final VBox textContainer = new VBox(3);
            private final Label messageLabel = new Label();
            private final Label timestampLabel = new Label();
            // private final Region spacer = new Region(); // C√≥ th·ªÉ kh√¥ng c·∫ßn spacer n·∫øu kh√¥ng c√≥ n√∫t action ri√™ng trong cell
            // private final Button actionButton = new Button();

            {
                emojiIconLabel.setMinWidth(25);
                emojiIconLabel.setMinHeight(25);
                emojiIconLabel.setAlignment(Pos.CENTER);
                emojiIconLabel.getStyleClass().add("notification-emoji-icon");

                messageLabel.setWrapText(true);
                messageLabel.getStyleClass().add("notification-message-text");
                timestampLabel.getStyleClass().add("notification-timestamp-text");

                VBox.setVgrow(messageLabel, Priority.ALWAYS);
                HBox.setHgrow(textContainer, Priority.ALWAYS);
                textContainer.getChildren().addAll(messageLabel, timestampLabel);

                // HBox.setHgrow(spacer, Priority.ALWAYS);
                // actionButton.setVisible(false); // M·∫∑c ƒë·ªãnh ·∫©n n√∫t action
                // actionButton.getStyleClass().add("secondary-button-small");

                hbox.getChildren().addAll(emojiIconLabel, textContainer /*, spacer, actionButton*/);
                hbox.setAlignment(Pos.CENTER_LEFT);
                hbox.setPadding(new Insets(10));
                hbox.getStyleClass().add("notification-cell-hbox");

                this.setOnMouseClicked(event -> {
                    Notification item = getItem();
                    if (item != null) {
                        if (!item.isRead()) {
                            if (notificationService.markAsRead(item.getId())) {
                                item.setRead(true);
                                updateItemStyleBasedOnReadStatus(item); // Ch·ªâ c·∫≠p nh·∫≠t style
                                // Gi·∫£m s·ªë l∆∞·ª£ng badge ngay l·∫≠p t·ª©c thay v√¨ load l·∫°i to√†n b·ªô list
                                updateUnreadCountInSidebar();
                                // Kh√¥ng c·∫ßn g·ªçi updateItem(item, false) v√¨ thu·ªôc t√≠nh isRead c·ªßa item ƒë√£ thay ƒë·ªïi,
                                // v√† n·∫øu cell ƒë∆∞·ª£c t√°i s·ª≠ d·ª•ng, updateItem s·∫Ω ƒë∆∞·ª£c g·ªçi.
                                // Ho·∫∑c c√≥ th·ªÉ g·ªçi this.getListView().refresh() ƒë·ªÉ l√†m m·ªõi to√†n b·ªô listview.
                            }
                        }
                        // X·ª≠ l√Ω actionLink
                        if (item.getActionLink() != null && !item.getActionLink().isEmpty()) {
                            handleNotificationAction(item);
                        }
                    }
                });
            }

            private void updateItemStyleBasedOnReadStatus(Notification item) {
                getStyleClass().removeAll("notification-cell-unread", "notification-cell-read");
                if (item != null && !item.isRead()) {
                    getStyleClass().add("notification-cell-unread");
                } else {
                    getStyleClass().add("notification-cell-read");
                }
            }

            @Override
            protected void updateItem(Notification item, boolean empty) {
                super.updateItem(item, empty);
                if (empty || item == null) {
                    setGraphic(null);
                } else {
                    messageLabel.setText(item.getMessage());
                    timestampLabel.setText(item.getFormattedCreatedAt());
                    String emoji = "üîî"; // Default
                    switch (item.getType()) {
                        case INFO: emoji = "‚ÑπÔ∏è"; break;
                        case SUCCESS: case LOAN_APPROVED_USER: emoji = "‚úÖ"; break;
                        case WARNING: case LOAN_DUE_SOON_USER: emoji = "‚ö†Ô∏è"; break;
                        case ERROR: case LOAN_REJECTED_USER: emoji = "‚ùå"; break;
                        case USER_YoutubeED: emoji = "üí¨"; break;
                        case DONATION_PROCESSED_USER: emoji = "üéÅ"; break;
                        // Th√™m c√°c NotificationType kh√°c c·ªßa User ·ªü ƒë√¢y
                        default: emoji = "üîî";
                    }
                    emojiIconLabel.setText(emoji);
                    updateItemStyleBasedOnReadStatus(item);
                    setGraphic(hbox);
                }
            }
        });
    }

    private void handleNotificationAction(Notification notification) {
        if (dashboardController == null || notification.getActionLink() == null) return;

        String action = notification.getActionLink().toUpperCase(); // Vi·∫øt hoa ƒë·ªÉ so s√°nh d·ªÖ h∆°n
        String relatedId = notification.getRelatedItemId();

        System.out.println("INFO_NOTIF_ACTION: Handling action: " + action + ", RelatedID: " + relatedId);

        switch (action) {
            case "VIEW_BOOK_DETAIL":
                if (relatedId != null && !relatedId.isEmpty()) {
                    // Book ID c√≥ th·ªÉ l√† ISBN ho·∫∑c internalId. ∆Øu ti√™n t√¨m theo ISBN tr∆∞·ªõc.
                    Optional<Book> bookOpt = BookManagementService.getInstance().findBookByIsbn13InLibrary(relatedId);
                    if (bookOpt.isEmpty() && relatedId.matches("\\d+")) { // N·∫øu kh√¥ng ph·∫£i ISBN v√† l√† s·ªë, th·ª≠ t√¨m b·∫±ng internalId
                        try {
                            bookOpt = BookManagementService.getInstance().findBookByInternalId(Integer.parseInt(relatedId));
                        } catch (NumberFormatException e) {
                            System.err.println("ERROR_NOTIF_ACTION: relatedId " + relatedId + " is not a valid integer for internalId.");
                        }
                    }

                    if (bookOpt.isPresent()) { // S·ª≠a: d√πng isPresent()
                        SessionManager.getInstance().setSelectedBook(bookOpt.get()); // S·ª≠a: d√πng get()
                        dashboardController.loadViewIntoCenter("user/BookDetailView.fxml");
                    } else {
                        showAlert(Alert.AlertType.WARNING, "Kh√¥ng T√¨m Th·∫•y", "Kh√¥ng t√¨m th·∫•y s√°ch li√™n quan (ID/ISBN: " + relatedId + "). S√°ch c√≥ th·ªÉ ƒë√£ b·ªã x√≥a.");
                    }
                } else {
                    showAlert(Alert.AlertType.WARNING, "Thi·∫øu Th√¥ng Tin", "Th√¥ng b√°o n√†y kh√¥ng c√≥ ID s√°ch li√™n quan.");
                }
                break;
            case "VIEW_MY_LOANS":
                dashboardController.loadViewIntoCenter("MyBookshelfView.fxml");
                SessionManager.getInstance().setTargetMyBookshelfTab("BORROWED_TAB_ID"); // C·∫ßn ƒë·ªãnh nghƒ©a ID cho tab
                break;
            case "VIEW_MY_REQUESTS":
                dashboardController.loadViewIntoCenter("MyBookshelfView.fxml");
                SessionManager.getInstance().setTargetMyBookshelfTab("REQUESTS_TAB_ID");
                break;
            // Th√™m c√°c case kh√°c
            default:
                System.out.println("INFO_NOTIF_ACTION: No specific handler for action: " + action);
                break;
        }
    }


    @FXML
    void handleRefreshNotifications(ActionEvent event) {
        if (currentUser != null) loadNotifications();
        else showAlert(Alert.AlertType.WARNING, "L·ªói", "Vui l√≤ng ƒëƒÉng nh·∫≠p.");
    }

    @FXML
    void handleMarkAllAsRead(ActionEvent event) {
        if (currentUser != null) {
            if (notificationService.markAllAsRead(currentUser.getUserId())) { // markAllAsRead gi·ªù tr·∫£ v·ªÅ boolean
                showAlert(Alert.AlertType.INFORMATION, "Ho√†n t·∫•t", "T·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc.");
            } else {
                showAlert(Alert.AlertType.INFORMATION, "Th√¥ng b√°o", "Kh√¥ng c√≥ th√¥ng b√°o m·ªõi n√†o ƒë·ªÉ ƒë√°nh d·∫•u.");
            }
            loadNotifications(); // Lu√¥n t·∫£i l·∫°i
        } else {
            showAlert(Alert.AlertType.WARNING, "L·ªói", "Vui l√≤ng ƒëƒÉng nh·∫≠p.");
        }
    }

    @FXML
    void handleDeleteReadNotificationsAction(ActionEvent event) {
        if (currentUser != null) {
            Alert confirmDialog = new Alert(Alert.AlertType.CONFIRMATION, "X√≥a t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc?", ButtonType.YES, ButtonType.NO);
            confirmDialog.setTitle("X√°c nh·∫≠n X√≥a");
            confirmDialog.setHeaderText(null);
            applyDialogStyles(confirmDialog);
            Optional<ButtonType> result = confirmDialog.showAndWait();

            if (result.isPresent() && result.get() == ButtonType.YES) { // S·ª≠a: d√πng isPresent() v√† get()
                if (notificationService.deleteReadNotifications(currentUser.getUserId())) {
                    showAlert(Alert.AlertType.INFORMATION, "Ho√†n t·∫•t", "ƒê√£ x√≥a c√°c th√¥ng b√°o ƒë√£ ƒë·ªçc.");
                } else {
                    showAlert(Alert.AlertType.INFORMATION, "Th√¥ng b√°o", "Kh√¥ng c√≥ th√¥ng b√°o ƒë√£ ƒë·ªçc n√†o ƒë·ªÉ x√≥a.");
                }
                loadNotifications();
            }
        } else {
            showAlert(Alert.AlertType.WARNING, "L·ªói", "Vui l√≤ng ƒëƒÉng nh·∫≠p.");
        }
    }

    private void updateUnreadCountInSidebar() {
        if (currentUser != null && dashboardController != null) {
            int unreadCount = notificationService.getUnreadNotificationCount(currentUser.getUserId());
            dashboardController.updateNotificationBadgeOnSidebar(unreadCount); // G·ªçi h√†m ƒë√£ th√™m ·ªü UserDashboardController
        }
    }

    private void showAlert(Alert.AlertType alertType, String title, String message) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        applyDialogStyles(alert);
        alert.showAndWait();
    }

    private void applyDialogStyles(Dialog<?> dialog) {
        try {
            URL cssUrl = getClass().getResource("/com/lms/quanlythuvien/css/styles.css");
            if (cssUrl != null) dialog.getDialogPane().getStylesheets().add(cssUrl.toExternalForm());
        } catch (Exception e) { System.err.println("WARN_DIALOG_CSS: Failed to load CSS for dialog: " + e.getMessage()); }
    }
}