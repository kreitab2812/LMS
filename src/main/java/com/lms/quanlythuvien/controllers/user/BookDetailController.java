package com.lms.quanlythuvien.controllers.user;

import com.lms.quanlythuvien.MainApp;
import com.lms.quanlythuvien.models.item.Book;
import com.lms.quanlythuvien.models.user.User;
import com.lms.quanlythuvien.models.transaction.BorrowingRequest;
import com.lms.quanlythuvien.models.item.BookReview;
import com.lms.quanlythuvien.models.system.Notification; // Th√™m cho g·ª≠i th√¥ng b√°o
import com.lms.quanlythuvien.services.library.BookManagementService;
import com.lms.quanlythuvien.services.transaction.BorrowingRequestService;
import com.lms.quanlythuvien.services.user.FavoriteBookService;
import com.lms.quanlythuvien.services.library.BookReviewService;
import com.lms.quanlythuvien.services.system.NotificationService; // Th√™m service
import com.lms.quanlythuvien.utils.session.SessionManager;

import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority; // <<< TH√äM IMPORT
import javafx.scene.layout.VBox;
// B·ªè Stage n·∫øu kh√¥ng d√πng dialog ri√™ng (view n√†y ƒë∆∞·ª£c load v√†o StackPane)

import java.io.InputStream;
import java.net.URL;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Optional; // <<< TH√äM IMPORT
import java.util.ResourceBundle;
// B·ªè IntStream n·∫øu kh√¥ng d√πng

public class BookDetailController implements Initializable {

    //<editor-fold desc="FXML Injections - Basic Info & Actions">
    @FXML private Label detailTitleLabel;
    @FXML private ImageView detailCoverImageView;
    @FXML private Label detailAuthorsLabel;
    @FXML private Label detailPublisherLabel;
    @FXML private Label detailPublishedDateLabel;
    @FXML private Label detailIsbnLabel;
    @FXML private Label detailPageCountLabel;
    @FXML private Label detailCategoriesLabel;
    @FXML private TextArea detailDescriptionArea;
    @FXML private Label detailAvailableQuantityLabel;
    @FXML private Label shelfLocationLabel;
    @FXML private Button requestBorrowButton;
    @FXML private Button closeDetailButton;
    //</editor-fold>

    //<editor-fold desc="FXML Injections - Favorite & Review/Rating">
    @FXML private Button favoriteButton;
    @FXML private Label averageRatingDisplayLabel;
    @FXML private HBox averageRatingStarsPane;
    @FXML private ListView<BookReview> reviewsListView;
    @FXML private ComboBox<Integer> ratingComboBox;
    @FXML private TextArea newCommentTextArea;
    @FXML private Button submitReviewButton;
    @FXML private Label reviewErrorLabel;
    //</editor-fold>

    private Book currentBook;
    private User currentUser;
    private BookManagementService bookManagementService;
    private BorrowingRequestService borrowingRequestService;
    private FavoriteBookService favoriteBookService;
    private BookReviewService bookReviewService;
    private NotificationService notificationService;
    private Image defaultBookCoverImage;

    private UserDashboardController dashboardController; // ƒê·ªÉ ƒëi·ªÅu h∆∞·ªõng

    private final String HEART_EMPTY = "ü§ç"; // Ch·ªâ icon
    private final String HEART_FULL = "‚ù§Ô∏è";   // Ch·ªâ icon

    public BookDetailController() {
        // Constructor
    }

    public void setDashboardController(UserDashboardController dashboardController) {
        this.dashboardController = dashboardController;
    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        bookManagementService = BookManagementService.getInstance();
        borrowingRequestService = BorrowingRequestService.getInstance();
        favoriteBookService = FavoriteBookService.getInstance();
        bookReviewService = BookReviewService.getInstance();
        notificationService = NotificationService.getInstance();
        currentUser = SessionManager.getInstance().getCurrentUser();

        loadDefaultBookCoverImage();
        setupRatingComboBox();
        setupReviewsListViewCellFactory();
        clearReviewError();

        Book bookFromSession = SessionManager.getInstance().getSelectedBook();
        // Kh√¥ng x√≥a book kh·ªèi session ·ªü ƒë√¢y, ƒë·ªÉ UserDashboardController ho·∫∑c
        // n∆°i g·ªçi quy·∫øt ƒë·ªãnh khi n√†o x√≥a (v√≠ d·ª• sau khi ƒëi·ªÅu h∆∞·ªõng ƒëi)

        if (bookFromSession != null && bookFromSession.getIsbn13() != null && !bookFromSession.getIsbn13().isEmpty()) {
            Optional<Book> freshBookOpt = bookManagementService.findBookByIsbn13InLibrary(bookFromSession.getIsbn13());
            if (freshBookOpt.isPresent()) {
                setBookDataUI(freshBookOpt.get()); // ƒê·ªïi t√™n h√†m ƒë·ªÉ r√µ r√†ng h∆°n
            } else {
                handleMissingBookData("S√°ch (ISBN: " + bookFromSession.getIsbn13() + ") kh√¥ng c√≤n t·ªìn t·∫°i trong th∆∞ vi·ªán.");
            }
        } else {
            handleMissingBookData("Kh√¥ng c√≥ th√¥ng tin s√°ch ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ hi·ªÉn th·ªã.");
        }
        updateControlsBasedOnLoginStatus();
    }

    private void loadDefaultBookCoverImage() {
        try (InputStream defaultStream = getClass().getResourceAsStream("/com/lms/quanlythuvien/images/default_book_cover.png")) {
            if (defaultStream != null) {
                defaultBookCoverImage = new Image(defaultStream);
            } else {
                System.err.println("ERROR_BDC_INIT: Default book cover resource not found.");
            }
        } catch (Exception e) {
            System.err.println("ERROR_BDC_INIT: Exception loading default book cover: " + e.getMessage());
        }
    }

    private void setupRatingComboBox() {
        if (ratingComboBox != null) {
            ObservableList<Integer> ratings = FXCollections.observableArrayList(5, 4, 3, 2, 1);
            ratingComboBox.setItems(ratings);
            ratingComboBox.setPromptText("Sao");
        }
    }

    private void updateControlsBasedOnLoginStatus() {
        boolean isLoggedIn = (currentUser != null);
        if (requestBorrowButton != null) {
            if (!isLoggedIn) {
                requestBorrowButton.setText("ƒêƒÉng nh·∫≠p ƒë·ªÉ m∆∞·ª£n");
                requestBorrowButton.setDisable(true);
            }
            // Tr·∫°ng th√°i disable/enable c·ª• th·ªÉ s·∫Ω do updateAvailabilityInfoAndRequestButtonStatus() x·ª≠ l√Ω
        }
        if (favoriteButton != null) favoriteButton.setDisable(!isLoggedIn);
        if (submitReviewButton != null) submitReviewButton.setDisable(!isLoggedIn);
        if (newCommentTextArea != null) {
            newCommentTextArea.setDisable(!isLoggedIn);
            newCommentTextArea.setPromptText(isLoggedIn ? "Vi·∫øt b√¨nh lu·∫≠n c·ªßa b·∫°n..." : "ƒêƒÉng nh·∫≠p ƒë·ªÉ b√¨nh lu·∫≠n.");
        }
        if (ratingComboBox != null) ratingComboBox.setDisable(!isLoggedIn);
    }

    // H√†m n√†y ƒë∆∞·ª£c g·ªçi sau khi ƒë√£ c√≥ `currentBook` (b·∫£n m·ªõi nh·∫•t t·ª´ DB)
    public void setBookDataUI(Book bookToDisplay) {
        this.currentBook = bookToDisplay;
        if (currentBook == null) {
            handleMissingBookData("D·ªØ li·ªáu s√°ch kh√¥ng h·ª£p l·ªá.");
            return;
        }

        System.out.println("DEBUG_BDC_SET_BOOK_UI: Displaying details for: " + currentBook.getTitleOrDefault("N/A"));

        detailTitleLabel.setText(currentBook.getTitleOrDefault("N/A"));
        detailAuthorsLabel.setText(currentBook.getAuthorsFormatted("N/A"));
        detailPublisherLabel.setText(currentBook.getPublisherOrDefault("N/A"));
        detailPublishedDateLabel.setText(currentBook.getPublishedDateOrDefault("N/A"));

        String isbnText = "ISBN-13: " + currentBook.getIsbn13OrDefault("N/A");
        if (currentBook.getIsbn10() != null && !currentBook.getIsbn10().isEmpty()) {
            isbnText += " / ISBN-10: " + currentBook.getIsbn10();
        }
        detailIsbnLabel.setText(isbnText);

        detailPageCountLabel.setText(currentBook.getPageCount() != null ? currentBook.getPageCount() + " trang" : "N/A");
        detailCategoriesLabel.setText(currentBook.getCategoriesFormatted("N/A"));
        detailDescriptionArea.setText(currentBook.getDescriptionOrDefault("Ch∆∞a c√≥ m√¥ t·∫£."));
        detailDescriptionArea.setWrapText(true);
        detailDescriptionArea.setEditable(false);
        shelfLocationLabel.setText(currentBook.getShelfLocationOrDefault("N/A"));

        loadCoverImageUI(currentBook.getThumbnailUrl());
        updateAvailabilityInfoAndRequestButtonStatus();
        updateFavoriteButtonStatus();
        loadBookReviewsAndRating();
    }

    private void handleMissingBookData(String message) {
        System.err.println("ERROR_BDC_MISSING_DATA: " + message);
        if (detailTitleLabel != null) detailTitleLabel.setText("Kh√¥ng T√¨m Th·∫•y S√°ch");
        if (detailDescriptionArea != null) detailDescriptionArea.setText(message);
        // V√¥ hi·ªáu h√≥a c√°c control kh√°c
        if(requestBorrowButton != null) {requestBorrowButton.setDisable(true); requestBorrowButton.setText("Kh√¥ng c√≥ s√°ch");}
        if(favoriteButton != null) favoriteButton.setDisable(true);
        if(submitReviewButton != null) submitReviewButton.setDisable(true);
        if(newCommentTextArea != null) newCommentTextArea.setDisable(true);
        if(ratingComboBox != null) ratingComboBox.setDisable(true);
        if(reviewsListView != null) reviewsListView.setPlaceholder(new Label(message));
        if(averageRatingDisplayLabel != null) averageRatingDisplayLabel.setText("");
        if(averageRatingStarsPane != null) averageRatingStarsPane.getChildren().clear();

        showAlert(Alert.AlertType.WARNING, "L·ªói Th√¥ng Tin", message);
        // Kh√¥ng t·ª± ƒë·ªông ƒë√≥ng view, ƒë·ªÉ ng∆∞·ªùi d√πng t·ª± ƒë√≥ng b·∫±ng n√∫t "ƒê√≥ng"
    }

    private void updateAvailabilityInfoAndRequestButtonStatus() {
        if (currentBook == null || detailAvailableQuantityLabel == null || requestBorrowButton == null) return;
        int available = currentBook.getAvailableQuantity();
        detailAvailableQuantityLabel.setText(String.valueOf(available));
        detailAvailableQuantityLabel.getStyleClass().removeAll("availability-good", "availability-low", "availability-out");

        if (currentUser == null) { // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
            requestBorrowButton.setText("ƒêƒÉng nh·∫≠p ƒë·ªÉ m∆∞·ª£n");
            requestBorrowButton.setDisable(true);
            return;
        }

        if (available > 0) {
            detailAvailableQuantityLabel.getStyleClass().add("availability-good");
            checkIfUserHasPendingOrApprovedRequest();
        } else {
            detailAvailableQuantityLabel.getStyleClass().add("availability-out");
            requestBorrowButton.setText("H·∫øt S√°ch");
            requestBorrowButton.setDisable(true);
        }
    }

    private void checkIfUserHasPendingOrApprovedRequest() {
        if (currentUser == null || currentBook == null || currentBook.getIsbn13() == null || borrowingRequestService == null || requestBorrowButton == null) {
            return;
        }
        // Ch·ªâ th·ª±c hi·ªán n·∫øu s√°ch c√≤n h√†ng (ƒë√£ ki·ªÉm tra ·ªü h√†m g·ªçi)
        if (currentBook.getAvailableQuantity() <=0) return;

        List<BorrowingRequest> userRequests = borrowingRequestService.getRequestsByUserId(currentUser.getUserId());
        Optional<BorrowingRequest> activeRequestOpt = userRequests.stream()
                .filter(req -> currentBook.getIsbn13().equals(req.getBookIsbn13()) &&
                        (req.getStatus() == BorrowingRequest.RequestStatus.PENDING ||
                                req.getStatus() == BorrowingRequest.RequestStatus.APPROVED))
                .max(Comparator.comparing(BorrowingRequest::getRequestDate));

        if (activeRequestOpt.isPresent()) {
            requestBorrowButton.setDisable(true);
            BorrowingRequest.RequestStatus status = activeRequestOpt.get().getStatus();
            if (status == BorrowingRequest.RequestStatus.PENDING) requestBorrowButton.setText("ƒêang ch·ªù duy·ªát");
            else if (status == BorrowingRequest.RequestStatus.APPROVED) requestBorrowButton.setText("ƒê√£ duy·ªát (Ch·ªù l·∫•y)");
        } else {
            requestBorrowButton.setDisable(false);
            requestBorrowButton.setText("G·ª≠i Y√™u C·∫ßu M∆∞·ª£n");
        }
    }

    private void loadCoverImageUI(String imageUrl) {
        if (detailCoverImageView == null) return;
        Image imageToSet = this.defaultBookCoverImage;
        if (imageUrl != null && !imageUrl.trim().isEmpty()) {
            String finalImageUrl = imageUrl.trim();
            if (finalImageUrl.startsWith("//")) finalImageUrl = "https:" + finalImageUrl;
            try {
                imageToSet = new Image(finalImageUrl, true);
                if (imageToSet.isError()) {
                    System.err.println("WARN_BDC_COVER: Error loading cover from: " + finalImageUrl);
                    imageToSet = this.defaultBookCoverImage;
                }
            } catch (Exception e) {
                System.err.println("ERROR_BDC_COVER: Exception loading cover: " + finalImageUrl + ". " + e.getMessage());
                imageToSet = this.defaultBookCoverImage;
            }
        }
        detailCoverImageView.setImage(imageToSet);
    }

    @FXML
    void handleFavoriteAction(ActionEvent event) {
        if (currentUser == null || currentBook == null || favoriteBookService == null) {
            showAlert(Alert.AlertType.WARNING, "Y√™u C·∫ßu ƒêƒÉng Nh·∫≠p", "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ thao t√°c.");
            return;
        }
        if (currentBook.getInternalId() <= 0) {
            showAlert(Alert.AlertType.ERROR, "L·ªói S√°ch", "S√°ch kh√¥ng c√≥ ID h·ª£p l·ªá.");
            return;
        }

        boolean isCurrentlyFavorite = favoriteBookService.isFavorite(currentUser.getUserId(), currentBook.getInternalId());
        boolean success;
        if (isCurrentlyFavorite) {
            success = favoriteBookService.removeFavorite(currentUser.getUserId(), currentBook.getInternalId());
            if (success) showAlert(Alert.AlertType.INFORMATION, "Y√™u Th√≠ch", "ƒê√£ b·ªè y√™u th√≠ch s√°ch '" + currentBook.getTitleOrDefault("N/A") + "'.");
            else showAlert(Alert.AlertType.ERROR, "L·ªói", "Kh√¥ng th·ªÉ b·ªè y√™u th√≠ch.");
        } else {
            success = favoriteBookService.addFavorite(currentUser.getUserId(), currentBook.getInternalId());
            if (success) showAlert(Alert.AlertType.INFORMATION, "Y√™u Th√≠ch", "ƒê√£ th√™m '" + currentBook.getTitleOrDefault("N/A") + "' v√†o danh s√°ch y√™u th√≠ch.");
            else showAlert(Alert.AlertType.ERROR, "L·ªói", "Kh√¥ng th·ªÉ th√™m v√†o y√™u th√≠ch.");
        }
        if (success) updateFavoriteButtonStatus();
    }

    private void updateFavoriteButtonStatus() {
        if (currentUser == null || currentBook == null || favoriteButton == null || favoriteBookService == null || currentBook.getInternalId() <= 0) {
            if (favoriteButton != null) favoriteButton.setDisable(true);
            return;
        }
        favoriteButton.setDisable(false);
        if (favoriteBookService.isFavorite(currentUser.getUserId(), currentBook.getInternalId())) {
            favoriteButton.setText(HEART_FULL);
            favoriteButton.getStyleClass().setAll("button", "favorite-button-active");
        } else {
            favoriteButton.setText(HEART_EMPTY);
            favoriteButton.getStyleClass().setAll("button", "favorite-button-inactive");
        }
    }

    private void loadBookReviewsAndRating() {
        if (currentBook == null || bookReviewService == null || reviewsListView == null || averageRatingDisplayLabel == null || averageRatingStarsPane == null) {
            if (averageRatingDisplayLabel!=null) averageRatingDisplayLabel.setText("Ch∆∞a c√≥ ƒë√°nh gi√°");
            if (averageRatingStarsPane!=null) averageRatingStarsPane.getChildren().clear();
            if (reviewsListView!=null) reviewsListView.setPlaceholder(new Label("Ch∆∞a c√≥ ƒë√°nh gi√° n√†o."));
            return;
        }
        int bookInternalId = currentBook.getInternalId();
        if (bookInternalId <= 0) {
            averageRatingDisplayLabel.setText("S√°ch kh√¥ng h·ª£p l·ªá.");
            reviewsListView.setPlaceholder(new Label("S√°ch kh√¥ng h·ª£p l·ªá."));
            averageRatingStarsPane.getChildren().clear();
            return;
        }

        Optional<Double> avgRatingOpt = bookReviewService.getAverageRatingForBook(bookInternalId);
        List<BookReview> reviews = bookReviewService.getReviewsByBookInternalId(bookInternalId);

        if (avgRatingOpt.isPresent()) {
            averageRatingDisplayLabel.setText(String.format("%.1f/5 (%d ƒë√°nh gi√°)", avgRatingOpt.get(), reviews.size()));
            displayRatingStars(averageRatingStarsPane, avgRatingOpt.get());
        } else {
            averageRatingDisplayLabel.setText(reviews.isEmpty() ? "Ch∆∞a c√≥ ƒë√°nh gi√°" : String.format("0.0/5 (%d ƒë√°nh gi√°)", reviews.size()));
            displayRatingStars(averageRatingStarsPane, 0);
        }

        if (reviews.isEmpty()) {
            reviewsListView.setPlaceholder(new Label("Ch∆∞a c√≥ ƒë√°nh gi√° n√†o. H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n!"));
        }
        reviews.sort(Comparator.comparing(BookReview::getReviewDate).reversed());
        reviewsListView.setItems(FXCollections.observableArrayList(reviews)); // G√°n cho ListView
    }

    private void displayRatingStars(HBox starsPane, double rating) {
        starsPane.getChildren().clear();
        int roundedRating = (int) Math.round(rating);
        for (int i = 1; i <= 5; i++) {
            Label starLabel = new Label(i <= roundedRating ? "‚≠ê" : "‚òÜ");
            starLabel.getStyleClass().add("rating-star-display");
            starsPane.getChildren().add(starLabel);
        }
    }

    private void setupReviewsListViewCellFactory() {
        reviewsListView.setCellFactory(lv -> new ListCell<BookReview>() {
            private final VBox content = new VBox(8);
            private final HBox authorAndRatingBox = new HBox(10);
            private final Label authorNameLabel = new Label();
            private final HBox reviewStarsDisplay = new HBox(2);
            private final Label reviewDateLabel = new Label();
            private final Label commentTextLabel = new Label();
            {
                authorNameLabel.getStyleClass().add("review-cell-author");
                reviewDateLabel.getStyleClass().add("review-cell-date");
                commentTextLabel.getStyleClass().add("review-cell-comment");
                commentTextLabel.setWrapText(true);
                commentTextLabel.setMaxWidth(Double.MAX_VALUE);
                VBox.setVgrow(commentTextLabel, Priority.ALWAYS); // <<< Priority c·∫ßn import

                authorAndRatingBox.setAlignment(Pos.CENTER_LEFT);
                authorAndRatingBox.getChildren().addAll(authorNameLabel, new Label("-"), reviewStarsDisplay);

                content.getChildren().addAll(authorAndRatingBox, reviewDateLabel, commentTextLabel);
                content.setPadding(new Insets(10));
                content.getStyleClass().add("review-cell-content");
            }
            @Override
            protected void updateItem(BookReview review, boolean empty) {
                super.updateItem(review, empty);
                if (empty || review == null) {
                    setGraphic(null);
                } else {
                    authorNameLabel.setText(review.getUserUsername() != null ? review.getUserUsername() : "Ng∆∞·ªùi d√πng ·∫©n danh");
                    reviewDateLabel.setText("v√†o l√∫c " + review.getFormattedReviewDate());
                    reviewStarsDisplay.getChildren().clear();
                    if (review.getRating() > 0) {
                        for (int i = 1; i <= 5; i++) {
                            Label star = new Label(i <= review.getRating() ? "‚òÖ" : "‚òÜ");
                            star.getStyleClass().add("review-star-small-cell");
                            reviewStarsDisplay.getChildren().add(star);
                        }
                    } else {
                        Label noRatingText = new Label("(ch∆∞a ƒë√°nh gi√° sao)");
                        noRatingText.getStyleClass().add("no-rating-text");
                        reviewStarsDisplay.getChildren().add(noRatingText);
                    }
                    commentTextLabel.setText(review.getCommentText());
                    setGraphic(content);
                }
            }
        });
    }

    @FXML
    void handleSubmitReviewAction(ActionEvent event) {
        if (currentUser == null) {
            showAlert(Alert.AlertType.WARNING, "Y√™u C·∫ßu ƒêƒÉng Nh·∫≠p", "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ g·ª≠i ƒë√°nh gi√°.");
            return;
        }
        if (currentBook == null || currentBook.getInternalId() <= 0) {
            showAlert(Alert.AlertType.ERROR, "L·ªói S√°ch", "S√°ch kh√¥ng h·ª£p l·ªá ƒë·ªÉ ƒë√°nh gi√°.");
            return;
        }
        Integer rating = ratingComboBox.getValue();
        String comment = newCommentTextArea.getText().trim();
        if (rating == null && comment.isEmpty()) {
            setReviewError("Vui l√≤ng ch·ªçn s·ªë sao ho·∫∑c vi·∫øt b√¨nh lu·∫≠n."); return;
        }
        int ratingValue = (rating != null) ? rating : 0;
        if (ratingValue == 0 && comment.isEmpty() && rating == null) {
            setReviewError("Vui l√≤ng ch·ªçn s·ªë sao ho·∫∑c vi·∫øt b√¨nh lu·∫≠n."); return;
        }
        clearReviewError();

        BookReview newReview = new BookReview(currentBook.getInternalId(), currentUser.getUserId(), ratingValue, comment);
        Optional<BookReview> submittedReviewOpt = bookReviewService.addReview(newReview);

        if (submittedReviewOpt.isPresent()) {
            showAlert(Alert.AlertType.INFORMATION, "G·ª≠i Th√†nh C√¥ng", "C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ƒë√°nh gi√°!");
            newCommentTextArea.clear();
            ratingComboBox.getSelectionModel().clearSelection();
            ratingComboBox.setPromptText("Ch·ªçn sao");
            loadBookReviewsAndRating();
        } else {
            showAlert(Alert.AlertType.ERROR, "L·ªói G·ª≠i ƒê√°nh Gi√°", "Kh√¥ng th·ªÉ g·ª≠i ƒë√°nh gi√°. B·∫°n c√≥ th·ªÉ ƒë√£ ƒë√°nh gi√° s√°ch n√†y ho·∫∑c c√≥ l·ªói x·∫£y ra.");
        }
    }

    private void setReviewError(String message) {
        if (reviewErrorLabel != null) {
            reviewErrorLabel.setText(message);
            reviewErrorLabel.setVisible(true);
            reviewErrorLabel.setManaged(true);
        }
    }
    private void clearReviewError() {
        if (reviewErrorLabel != null) {
            reviewErrorLabel.setText("");
            reviewErrorLabel.setVisible(false);
            reviewErrorLabel.setManaged(false);
        }
    }

    @FXML
    void handleRequestBorrowAction(ActionEvent event) {
        if (currentUser == null) {
            showAlert(Alert.AlertType.WARNING, "Y√™u C·∫ßu ƒêƒÉng Nh·∫≠p", "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ m∆∞·ª£n s√°ch.");
            return;
        }
        if (currentBook == null || currentBook.getIsbn13() == null || currentBook.getIsbn13().isEmpty()) {
            showAlert(Alert.AlertType.ERROR, "L·ªói S√°ch", "S√°ch kh√¥ng h·ª£p l·ªá ƒë·ªÉ y√™u c·∫ßu m∆∞·ª£n.");
            return;
        }

        // Lu√¥n l·∫•y th√¥ng tin s√°ch m·ªõi nh·∫•t t·ª´ DB tr∆∞·ªõc khi th·ª±c hi·ªán h√†nh ƒë·ªông
        Optional<Book> freshBookOpt = bookManagementService.findBookByIsbn13InLibrary(currentBook.getIsbn13());
        if (freshBookOpt.isEmpty()) {
            handleMissingBookData("S√°ch n√†y kh√¥ng c√≤n t·ªìn t·∫°i.");
            return;
        }
        this.currentBook = freshBookOpt.get(); // C·∫≠p nh·∫≠t currentBook v·ªõi d·ªØ li·ªáu m·ªõi nh·∫•t

        if (currentBook.getAvailableQuantity() <= 0) {
            showAlert(Alert.AlertType.INFORMATION, "H·∫øt S√°ch", "S√°ch '" + currentBook.getTitleOrDefault("N/A") + "' hi·ªán ƒë√£ h·∫øt h√†ng.");
            updateAvailabilityInfoAndRequestButtonStatus(); // C·∫≠p nh·∫≠t UI
            return;
        }

        // Ki·ªÉm tra l·∫°i xem user c√≥ request ƒëang ch·ªù/ƒë√£ duy·ªát cho s√°ch n√†y kh√¥ng
        // (logic n√†y ƒë∆∞·ª£c g·ªçi b√™n trong updateAvailabilityInfoAndRequestButtonStatus)
        // N·∫øu n√∫t requestBorrowButton b·ªã disable sau khi c·∫≠p nh·∫≠t, nghƒ©a l√† kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu
        if (requestBorrowButton.isDisable()) {
            showAlert(Alert.AlertType.INFORMATION, "Th√¥ng B√°o", requestBorrowButton.getText()); // Hi·ªÉn th·ªã l√Ω do t·ª´ text c·ªßa n√∫t
            return;
        }

        Optional<BorrowingRequest> requestOpt = borrowingRequestService.addRequest(currentUser.getUserId(), currentBook.getIsbn13());
        if (requestOpt.isPresent()) {
            showAlert(Alert.AlertType.INFORMATION, "Y√™u C·∫ßu Th√†nh C√¥ng", "ƒê√£ g·ª≠i y√™u c·∫ßu m∆∞·ª£n s√°ch '" + currentBook.getTitleOrDefault("N/A") + "'. Vui l√≤ng ch·ªù duy·ªát.");
            // G·ª≠i th√¥ng b√°o cho Admin
            notificationService.createNotification(
                    null, // userId l√† null cho th√¥ng b√°o h·ªá th·ªëng/admin
                    "Ng∆∞·ªùi d√πng '" + currentUser.getUsername() + "' y√™u c·∫ßu m∆∞·ª£n s√°ch: " + currentBook.getTitleOrDefault("N/A") + " (ISBN: " + currentBook.getIsbn13() + ")",
                    Notification.NotificationType.NEW_LOAN_REQUEST, // ƒê·∫£m b·∫£o Type n√†y t·ªìn t·∫°i
                    requestOpt.get().getRequestId(), // relatedItemId
                    null // actionLink
            );
        } else {
            showAlert(Alert.AlertType.ERROR, "L·ªói Y√™u C·∫ßu", "Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu. B·∫°n c√≥ th·ªÉ ƒë√£ c√≥ y√™u c·∫ßu cho s√°ch n√†y.");
        }
        updateAvailabilityInfoAndRequestButtonStatus(); // C·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i n√∫t
    }

    @FXML
    void handleCloseDetailAction(ActionEvent event) {
        navigateBackToPreviousView();
    }

    private void navigateBackToPreviousView() {
        if (this.dashboardController != null) {
            this.dashboardController.loadViewIntoCenter("UserLibraryView.fxml"); // Ho·∫∑c view tr∆∞·ªõc ƒë√≥
            SessionManager.getInstance().setSelectedBook(null); // X√≥a s√°ch kh·ªèi session
        } else {
            System.err.println("WARN_BDC_CLOSE: dashboardController is null. Cannot navigate back.");
            // Fallback an to√†n: c√≥ th·ªÉ kh√¥ng l√†m g√¨ ho·∫∑c hi·ªÉn th·ªã th√¥ng b√°o
            showAlert(Alert.AlertType.INFORMATION, "Th√¥ng B√°o", "Vui l√≤ng s·ª≠ d·ª•ng thanh ƒëi·ªÅu h∆∞·ªõng.");
        }
    }

    private void showAlert(Alert.AlertType alertType, String title, String message) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        applyDialogStyles(alert);
        alert.showAndWait();
    }

    private void applyDialogStyles(Dialog<?> dialog) {
        try {
            URL cssUrl = getClass().getResource("/com/lms/quanlythuvien/css/styles.css");
            if (cssUrl != null) {
                dialog.getDialogPane().getStylesheets().add(cssUrl.toExternalForm());
            }
        } catch (Exception e) { System.err.println("WARN_DIALOG_CSS: Failed to load CSS for dialog: " + e.getMessage()); }
    }
}